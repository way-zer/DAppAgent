//Auto generated by genType.js
export type AppLocalMeta = {
      firstUse: Timestamp,
      lastUse: Timestamp,
      permissions: Record<string, {
        granted: boolean,
        time: Timestamp
      }>,
      lastLocalProgramDir?: string
    };

interface AppsApi {
    /** @api() */
    thisInfo(): Promise<{ id: string; url: string; fork: string | undefined; program: string; modifiable: boolean; publicIds: string[]; localData: AppLocalMeta; name: string; desc: string; icon: string; ext: Record<string, any>; creator: string; updated: number; databases: Record<string, string>; recordSign?: string | undefined; }>;
    /** @api({permission: 'apps.admin'}) */
    list(): Promise<{ id: string; url: string; modifiable: boolean; publicIds: string[]; }[]>;
    /** @api({permission: 'apps.admin'}) */
    info(id: string): Promise<{ id: string; url: string; fork: string | undefined; program: string; modifiable: boolean; publicIds: string[]; localData: AppLocalMeta; name: string; desc: string; icon: string; ext: Record<string, any>; creator: string; updated: number; databases: Record<string, string>; recordSign?: string | undefined; }>;
    /** @api({permission: 'apps.admin'}) */
    grantPermission(id: string, permissions: string[]): Promise<void>;
    /** @api({permission: 'apps.admin'}) */
    create(name: string): Promise<{ id: string; url: string; fork: string | undefined; program: string; modifiable: boolean; publicIds: string[]; localData: AppLocalMeta; name: string; desc: string; icon: string; ext: Record<string, any>; creator: string; updated: number; databases: Record<string, string>; recordSign?: string | undefined; }>;
    /** @api({permission: 'apps.admin'}) */
    fork(name: string, fromApp: string): Promise<{ id: string; url: string; fork: string | undefined; program: string; modifiable: boolean; publicIds: string[]; localData: AppLocalMeta; name: string; desc: string; icon: string; ext: Record<string, any>; creator: string; updated: number; databases: Record<string, string>; recordSign?: string | undefined; }>;
    /** @api({permission: 'apps.admin'}) */
    publish(id: string): Promise<void>;
    /** @api({permission: 'apps.admin'}) */
    clone(id: string): Promise<{ id: string; url: string; fork: string | undefined; program: string; modifiable: boolean; publicIds: string[]; localData: AppLocalMeta; name: string; desc: string; icon: string; ext: Record<string, any>; creator: string; updated: number; databases: Record<string, string>; recordSign?: string | undefined; }>;
    /** @api({permission: 'apps.admin'}) */
    delete(id: string): Promise<void>;
    /** @api() */
    checkUpdateSelf(): Promise<void>;
    /** @api({permission: 'apps.admin'}) */
    checkUpdate(id: string): Promise<void>;
    /**
     * desc.ext.* null to delete key
     */
    /** @api() */
    updateDescSelf(desc: typeof AppsApi.DescStruct['TYPE']): Promise<void>;
    /** @api({permission: 'apps.admin'}) */
    updateDesc(id: string, desc: Partial<Pick<AppMeta, 'name' | 'desc' | 'icon' | 'ext'>>): Promise<void>;
    /** @api({permission: 'apps.syncProgram'}) */
    syncProgram(id: string, dir: string): Promise<string>;
}

export interface Transaction {
    id: string;
    token: string;
    from: string;
    time: number;
    app: string;
    service: string;
    payload: object;
    timeout?: number;
    _callback?: (response: object) => void;
}

/**
 * 跨应用调用接口
 */
interface CallApi {
    /**
     * 请求某一应用接口,长连接等待返回
     * @param app 被调用应用id
     * @param service 需要调用的接口
     * @param payload 传给接口的参数
     */
    /** @api() */
    request(app: string, service: string, payload: object): Promise<object>;
    /**
     * 响应请求
     * @param id 调用时,平台传入的事务id
     * @param token 调用时,平台传入的事务token
     * @param response 返回结果
     */
    /** @api() */
    respond(id: string, token: string, response: object): Promise<void>;
    /** @api() */
    pullTransaction(token?: string): Promise<Transaction[]>;
    /**
     * 心跳延时
     * 针对长时间请求,例如oauth登录之类需要用户操作的
     * 需每10s调用一次,保证存活
     */
    /** @api() */
    heartbeat(id: string, token: string): Promise<void>;
}

interface DBApi {
    /** @api({permission: 'db.use'}) */
    insert<T extends { _id: string }>(dbName: string, body: T): Promise<string>;
    /** @api({permission: 'db.use'}) */
    get<T extends { _id: string }>(dbName: string, _id: string): Promise<T>;
    /** @api({permission: 'db.use'}) */
    delete<T extends { _id: string }>(dbName: string, _id: string): Promise<string>;
    /** @api({permission: 'db.use'}) */
    queryAll<T extends { _id: string }>(dbName: string, offset: number = 0, limit: number = -1): Promise<T[]>;
    /** @api({permission: 'db.use'}) */
    query<T extends { _id: string }>(dbName: string, filter: FilterQuery<T>, offset: number = 0, limit: number = -1): Promise<{ count: number; offset: number; limit: number; data: T[]; }>;
}

interface TestApi {
    /** @api() */
    hello(): Promise<string>;
}

interface IntegrateApi {
    appRecord(app: App): Promise<string>;
    appRecordOK(app: App, sign: string): Promise<boolean>;
}

interface SystemApi {
    /** @api({permission: 'system.info'}) */
    status(): Promise<{ ipfs: boolean; orbitDB: boolean; bandwidth: { totalIn: string; totalOut: string; rateIn: number; rateOut: number; }[]; peers: { addr: string; peer: string; latency?: string | undefined; muxer?: string | undefined; streams?: string[] | undefined; direction?: "inbound" | "outbound" | undefined; }[]; }>;
    /** @api({permission: 'system.admin'}) */
    connectPeer(addr: string): Promise<void>;
    /** @api({permission: 'system.selectDir'}) */
    selectDir(): Promise<string | null>;
}

export type Services = { test: TestApi; apps: AppsApi; call: CallApi; db: DBApi; system: SystemApi; integrate: IntegrateApi; };
