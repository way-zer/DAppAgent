//Auto generated by genType.js
export type DBType = 'docstore' | 'keyvalue' | 'feed' | 'eventlog' | 'counter';
export type AccessType = 'private' | 'selfWrite';

export interface DataBase {
    name: string;
    type: DBType;
    access: AccessType;
    addr?: string;
}

export interface AppDesc {
    title: string;
    desc: string;
    author: string;
    icon: string;
    tags: string[];
    links: Record<string, string>;
}

export interface AppMetadata {
    recordSign?: string;
    permissions: string[];
    databases: DataBase[];
    desc: Partial<AppDesc>;
}

interface AppsApi {
    /** @api({permission: 'apps.admin'}) */
    listPrivate(): Promise<Record<string, { cid: string; prod: string; }>>;
    /** @api({permission: 'apps.admin'}) */
    create(name: string): Promise<{ name: string; cid: string; prod: string; recordSign?: string | undefined; permissions: string[]; databases: DataBase[]; desc: Partial<AppDesc>; }>;
    /** @api({permission: 'apps.admin'}) */
    info(name: string): Promise<{ name: string; cid: string; prod: string; recordSign?: string | undefined; permissions: string[]; databases: DataBase[]; desc: Partial<AppDesc>; }>;
    /** @api({permission: 'apps.admin'}) */
    updateDesc(name: string, desc: object): Promise<void>;
    /** @api({permission: 'apps.admin'}) */
    publish(name: string): Promise<void>;
    /** @api() */
    thisInfo(): Promise<AppMetadata>;
}

export interface Transaction {
    id: string;
    token: string;
    from: string;
    time: number;
    app: string;
    service: string;
    payload: object;
    timeout?: number;
    _callback?: (response: object) => void;
}

/**
 * 跨应用调用接口
 */
interface CallApi {
    /**
     * 请求某一应用接口,长连接等待返回
     * @param app 被调用应用id
     * @param service 需要调用的接口
     * @param payload 传给接口的参数
     */
    /** @api() */
    request(app: string, service: string, payload: object): Promise<object>;
    /**
     * 响应请求
     * @param id 调用时,平台传入的事务id
     * @param token 调用时,平台传入的事务token
     * @param response 返回结果
     */
    /** @api() */
    respond(id: string, token: string, response: object): Promise<void>;
    /** @api() */
    pullTransaction(): Promise<Transaction[]>;
    /**
     * 心跳延时
     * 针对长时间请求,例如oauth登录之类需要用户操作的
     * 需每10s调用一次,保证存活
     */
    /** @api() */
    heartbeat(id: string, token: string): Promise<void>;
}

interface DBApi {
    /** @api({permission: 'db.admin'}) */
    create(appId: string, name: string, access: AccessType): Promise<DataBase>;
    /** @api({permission: 'db.use'}) */
    insert<T extends { _id: string }>(dbName: string, body: T): Promise<string>;
    /** @api({permission: 'db.use'}) */
    get<T extends { _id: string }>(dbName: string, _id: string): Promise<T>;
    /** @api({permission: 'db.use'}) */
    delete<T extends { _id: string }>(dbName: string, _id: string): Promise<string>;
    /** @api({permission: 'db.use'}) */
    queryAll<T extends { _id: string }>(dbName: string, offset: number = 0, limit: number = -1): Promise<T[]>;
}

/** Not resolve */
type CID = {};

export interface Mtime {
    secs: number;
    nsecs?: number;
}

export interface MFSEntry {
    /**
     * The object's name
     */
    name: string;
    /**
     * The object's type (directory or file)
     */
    type: 'directory' | 'file';
    /**
     * The size of the file in bytes
     */
    size: number;
    /**
     * The CID of the object
     */
    cid: CID;
    /**
     * The UnixFS mode as a Number
     */
    mode?: number;
    /**
     * An object with numeric secs and nsecs properties
     */
    mtime?: Mtime;
}

interface FileApi {
    /** @api() */
    list(path: string = '/'): Promise<(MFSEntry & { cid: string; })[]>;
    /**
     * 上传文件,或复制文件
     * 上传需先通过/ipfs/upload接口换取cid
     */
    /** @api({permission: 'file.admin'}) */
    upload(appName: string, path: string, cid: string): Promise<void>;
    /** @api({permission: 'file.admin'}) */
    mkdir(appName: string, path: string): Promise<void>;
    /** @api({permission: 'file.admin'}) */
    delete(appName: string, path: string): Promise<void>;
}

interface TestApi {
    /** @api() */
    hello(): Promise<string>;
}

interface SystemApi {
    /** @api({permission: 'system.info'}) */
    status(): Promise<{ ipfs: boolean; orbitDB: boolean; bandwidth: { totalIn: string; totalOut: string; rateIn: number; rateOut: number; }[]; peers: { addr: string; peer: string; latency?: string | undefined; muxer?: string | undefined; streams?: string[] | undefined; direction?: "inbound" | "outbound" | undefined; }[]; }>;
    /** @api({permission: 'system.admin'}) */
    connectPeer(addr: string): Promise<void>;
}

export type Services = { test: TestApi; apps: AppsApi; call: CallApi; db: DBApi; file: FileApi; system: SystemApi; };
